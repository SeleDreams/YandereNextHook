#include <windows.h>
#include "MonoHooker.h"

// THIS IS AN AUTOGENERATED FILE TO PROXY THE DLL, MOST OF THE INTERESTING CODE STARTS AT MONOHOOKER

struct version_dll {
	HMODULE dll;
	FARPROC OrignalGetFileVersionInfoA;
	FARPROC OrignalGetFileVersionInfoByHandle;
	FARPROC OrignalGetFileVersionInfoExA;
	FARPROC OrignalGetFileVersionInfoExW;
	FARPROC OrignalGetFileVersionInfoSizeA;
	FARPROC OrignalGetFileVersionInfoSizeExA;
	FARPROC OrignalGetFileVersionInfoSizeExW;
	FARPROC OrignalGetFileVersionInfoSizeW;
	FARPROC OrignalGetFileVersionInfoW;
	FARPROC OrignalVerFindFileA;
	FARPROC OrignalVerFindFileW;
	FARPROC OrignalVerInstallFileA;
	FARPROC OrignalVerInstallFileW;
	FARPROC OrignalVerLanguageNameA;
	FARPROC OrignalVerLanguageNameW;
	FARPROC OrignalVerQueryValueA;
	FARPROC OrignalVerQueryValueW;
} version;

BOOL _stdcall FakeGetFileVersionInfoA(LPCSTR filename, DWORD dwhandle, DWORD dwlen, LPVOID lpdata) {

	return ((BOOL(_stdcall*)(LPCSTR, DWORD, DWORD, LPVOID)) version.OrignalGetFileVersionInfoA)(filename, dwhandle, dwlen, lpdata);
}
BOOL _stdcall FakeGetFileVersionInfoByHandle(HANDLE hFile, LPBY_HANDLE_FILE_INFORMATION lpFileInformation) {
	return ((BOOL(_stdcall*)(HANDLE, LPBY_HANDLE_FILE_INFORMATION))version.OrignalGetFileVersionInfoByHandle)(hFile, lpFileInformation);
}
BOOL _stdcall FakeGetFileVersionInfoExA(DWORD dwFlags, LPCSTR filename, DWORD dwhandle, DWORD dwlen, LPVOID lpdata) {
	return ((BOOL(_stdcall*)(DWORD, LPCSTR, DWORD, DWORD, LPVOID))version.OrignalGetFileVersionInfoExA)(dwFlags, filename, dwhandle, dwlen, lpdata);
}
BOOL _stdcall FakeGetFileVersionInfoExW(DWORD dwFlags, LPCWSTR filename, DWORD dwhandle, DWORD dwlen, LPVOID lpdata) {
	return ((BOOL(_stdcall*)(DWORD, LPCWSTR, DWORD, DWORD, LPVOID))version.OrignalGetFileVersionInfoExW)(dwFlags, filename, dwhandle, dwlen, lpdata);
}
DWORD _stdcall FakeGetFileVersionInfoSizeA(LPCSTR  lptstrFilename, LPDWORD lpdwHandle) {
	return ((DWORD(_stdcall*)(LPCSTR, LPDWORD))version.OrignalGetFileVersionInfoSizeA)(lptstrFilename, lpdwHandle);
}

DWORD _stdcall FakeGetFileVersionInfoSizeExA(DWORD dwFlags, LPCSTR  lptstrFilename, LPDWORD lpdwHandle)
{
	return ((DWORD(_stdcall*)(DWORD, LPCSTR, LPDWORD))version.OrignalGetFileVersionInfoSizeExA)(dwFlags, lptstrFilename, lpdwHandle);
}


DWORD _stdcall FakeGetFileVersionInfoSizeExW(DWORD dwFlags, LPCWSTR  lptstrFilename, LPDWORD lpdwHandle)
{
	return ((DWORD(_stdcall*)(DWORD, LPCWSTR, LPDWORD))version.OrignalGetFileVersionInfoSizeExW)(dwFlags, lptstrFilename, lpdwHandle);
}


DWORD _stdcall FakeGetFileVersionInfoSizeW(LPCWSTR  lptstrFilename, LPDWORD lpdwHandle) {
	return ((DWORD(_stdcall*)(LPCWSTR, LPDWORD))version.OrignalGetFileVersionInfoW)(lptstrFilename, lpdwHandle);
}

BOOL _stdcall FakeGetFileVersionInfoW(LPCWSTR filename, DWORD dwhandle, DWORD dwlen, LPVOID lpdata) {
	return ((BOOL(_stdcall*)(LPCWSTR, DWORD, DWORD, LPVOID)) version.OrignalGetFileVersionInfoW)(filename, dwhandle, dwlen, lpdata);
}

DWORD _stdcall FakeVerFindFileA(
	DWORD  uFlags,
	LPCSTR szFileName,
	LPCSTR szWinDir,
	LPCSTR szAppDir,
	LPSTR  szCurDir,
	PUINT  puCurDirLen,
	LPSTR  szDestDir,
	PUINT  puDestDirLen
)
{
	return ((DWORD(_stdcall*)(DWORD, LPCSTR, LPCSTR, LPCSTR, LPSTR, PUINT, LPSTR, PUINT))version.OrignalVerFindFileA)(uFlags, szFileName, szWinDir, szAppDir, szCurDir, puCurDirLen, szDestDir, puDestDirLen);

}

DWORD _stdcall FakeVerFindFileW(
	DWORD  uFlags,
	LPCWSTR szFileName,
	LPCWSTR szWinDir,
	LPCWSTR szAppDir,
	LPWSTR  szCurDir,
	PUINT  puCurDirLen,
	LPWSTR  szDestDir,
	PUINT  puDestDirLen
) {
	return ((DWORD(_stdcall*)(DWORD, LPCWSTR, LPCWSTR, LPCWSTR, LPWSTR, PUINT, LPWSTR, PUINT))version.OrignalVerFindFileW)(uFlags, szFileName, szWinDir, szAppDir, szCurDir, puCurDirLen, szDestDir, puDestDirLen);
}

DWORD _stdcall FakeVerInstallFileA(
	DWORD  uFlags,
	LPCSTR szSrcFileName,
	LPCSTR szDestFileName,
	LPCSTR szSrcDir,
	LPCSTR szDestDir,
	LPCSTR szCurDir,
	LPSTR  szTmpFile,
	PUINT  puTmpFileLen
) {
	return ((DWORD(_stdcall*)(DWORD, LPCSTR, LPCSTR, LPCSTR, LPCSTR, LPCSTR, LPSTR, PUINT)) version.OrignalVerInstallFileA)(uFlags, szSrcFileName, szDestFileName, szSrcDir, szDestDir, szCurDir, szTmpFile, puTmpFileLen);
}

DWORD _stdcall FakeVerInstallFileW(
	DWORD  uFlags,
	LPCWSTR szSrcFileName,
	LPCWSTR szDestFileName,
	LPCWSTR szSrcDir,
	LPCWSTR szDestDir,
	LPCWSTR szCurDir,
	LPWSTR  szTmpFile,
	PUINT  puTmpFileLen
) {
	return ((DWORD(_stdcall*)(DWORD, LPCWSTR, LPCWSTR, LPCWSTR, LPCWSTR, LPCWSTR, LPWSTR, PUINT))version.OrignalVerInstallFileW)(uFlags, szSrcFileName, szDestFileName, szSrcDir, szDestDir, szCurDir, szTmpFile, puTmpFileLen);
}

DWORD _stdcall FakeVerLanguageNameA(
	DWORD wLang,
	LPSTR szLang,
	DWORD cchLang
) {
	return ((DWORD(_stdcall*)(DWORD, LPSTR, DWORD))version.OrignalVerLanguageNameA)(wLang, szLang, cchLang);
}
DWORD _stdcall FakeVerLanguageNameW(
	DWORD wLang,
	LPWSTR szLang,
	DWORD cchLang
) {
	return ((DWORD(_stdcall*)(DWORD, LPWSTR, DWORD))version.OrignalVerLanguageNameW)(wLang, szLang, cchLang);
}
BOOL _stdcall FakeVerQueryValueA(
	LPCVOID pBlock,
	LPCSTR  lpSubBlock,
	LPVOID* lplpBuffer,
	PUINT   puLen
) {

	return ((BOOL(_stdcall*)(LPCVOID, LPCSTR, LPVOID*, PUINT))version.OrignalVerQueryValueA)(pBlock, lpSubBlock, lplpBuffer, puLen);
}

BOOL _stdcall FakeVerQueryValueW(
	LPCVOID pBlock,
	LPCWSTR  lpSubBlock,
	LPVOID* lplpBuffer,
	PUINT   puLen
) {
	return ((BOOL(_stdcall*)(LPCVOID, LPCWSTR, LPVOID*, PUINT))version.OrignalVerQueryValueW)(pBlock, lpSubBlock, lplpBuffer, puLen);
}

bool done = false;
BOOL APIENTRY DllMain(HMODULE hModule, DWORD ul_reason_for_call, LPVOID lpReserved) {
	if (done) {
		return TRUE;
	}
	done = true;
	char path[MAX_PATH];
	if (DLL_PROCESS_ATTACH)
	{
		CopyMemory(path + GetSystemDirectoryA(path, MAX_PATH - 13), "\\version.dll", 14);
		version.dll = LoadLibraryA(path);
		if (version.dll == NULL)
		{
			MessageBoxA(0, "Cannot load original version.dll library", "Proxy", MB_ICONERROR);
			ExitProcess(0);
		}
		version.OrignalGetFileVersionInfoA = GetProcAddress(version.dll, "GetFileVersionInfoA");
		version.OrignalGetFileVersionInfoByHandle = GetProcAddress(version.dll, "GetFileVersionInfoByHandle");
		version.OrignalGetFileVersionInfoExA = GetProcAddress(version.dll, "GetFileVersionInfoExA");
		version.OrignalGetFileVersionInfoExW = GetProcAddress(version.dll, "GetFileVersionInfoExW");
		version.OrignalGetFileVersionInfoSizeA = GetProcAddress(version.dll, "GetFileVersionInfoSizeA");
		version.OrignalGetFileVersionInfoSizeExA = GetProcAddress(version.dll, "GetFileVersionInfoSizeExA");
		version.OrignalGetFileVersionInfoSizeExW = GetProcAddress(version.dll, "GetFileVersionInfoSizeExW");
		version.OrignalGetFileVersionInfoSizeW = GetProcAddress(version.dll, "GetFileVersionInfoSizeW");
		version.OrignalGetFileVersionInfoW = GetProcAddress(version.dll, "GetFileVersionInfoW");
		version.OrignalVerFindFileA = GetProcAddress(version.dll, "VerFindFileA");
		version.OrignalVerFindFileW = GetProcAddress(version.dll, "VerFindFileW");
		version.OrignalVerInstallFileA = GetProcAddress(version.dll, "VerInstallFileA");
		version.OrignalVerInstallFileW = GetProcAddress(version.dll, "VerInstallFileW");
		version.OrignalVerLanguageNameA = GetProcAddress(version.dll, "VerLanguageNameA");
		version.OrignalVerLanguageNameW = GetProcAddress(version.dll, "VerLanguageNameW");
		version.OrignalVerQueryValueA = GetProcAddress(version.dll, "VerQueryValueA");
		version.OrignalVerQueryValueW = GetProcAddress(version.dll, "VerQueryValueW");
		MonoHooker::Hook();
	}
	return TRUE;
}
